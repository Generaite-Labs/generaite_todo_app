@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ToDo.Domain.Entities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Forgot your password?</PageTitle>

<RadzenCard class="rz-my-12 rz-mx-auto" style="max-width: 500px;">
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H3">Forgot your password?</RadzenText>
        <RadzenText TextStyle="TextStyle.H6">Enter your email.</RadzenText>

        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="rz-color-danger" role="alert" />

            <RadzenStack Gap="1rem" Class="rz-mb-3">
                <InputText @bind-Value="Input.Email" class="rz-textbox" autocomplete="username" aria-required="true" placeholder="name@example.com" style="width: 100%;" />
                <ValidationMessage For="() => Input.Email" class="rz-color-danger" />
            </RadzenStack>
            <RadzenButton 
                Text="Reset password"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Large"
                Style="width: 100%;"
                ButtonType="ButtonType.Submit"
            />
        </EditForm>
    </RadzenStack>
</RadzenCard>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
