@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ToDo.Domain.Entities

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<RadzenRow>
    <RadzenColumn Size="4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <RadzenText TextStyle="TextStyle.H2">Use a local account to log in.</RadzenText>
                <hr />
                <ValidationSummary class="rz-color-danger" role="alert" />
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                    <RadzenFormField Text="Email" Style="width: 100%;">
                        <InputText class="rz-textbox" @bind-Value="Input.Email" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    </RadzenFormField>
                    <ValidationMessage For="() => Input.Email" class="rz-color-danger" />

                    <RadzenFormField Text="Password" Style="width: 100%;">
                        <InputText class="rz-textbox" type="password" @bind-Value="Input.Password" autocomplete="current-password" aria-required="true" placeholder="password" />
                    </RadzenFormField>
                    <ValidationMessage For="() => Input.Password" class="rz-color-danger" />
                    <div class="rz-text-align-center">
                        <InputCheckbox @bind-Value="Input.RememberMe" />
                        <RadzenLabel Text="Remember me" Component="CheckBox1" class="rz-ms-2" />
                    </div>
                    
                    <div>
                        <RadzenButton
                            ButtonType="ButtonType.Submit"
                            Text="Log in"
                            ButtonStyle="ButtonStyle.Primary"
                            Size="ButtonSize.Large" />
                    </div>
                    <div>
                        <p>
                            <a href="Account/ForgotPassword">Forgot your password?</a>
                        </p>
                        <p>
                            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                        </p>
                        <p>
                            <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                        </p>
                    </div>
                </RadzenStack>
            </EditForm>
        </section>
    </RadzenColumn>
    <RadzenColumn Size="6" Offset="2">
        <section>
            <RadzenText TextStyle="TextStyle.H3">Use another service to log in.</RadzenText>
            <hr />
            <ExternalLoginPicker />
        </section>
    </RadzenColumn>
</RadzenRow>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
