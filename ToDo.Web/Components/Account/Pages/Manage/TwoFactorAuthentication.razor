@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using ToDo.Domain.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<RadzenText TextStyle="TextStyle.H3">Two-factor authentication (2FA)</RadzenText>

@if (canTrack)
{
    if (is2faEnabled)
    {
        if (recoveryCodesLeft == 0)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat">
                <strong>You have no recovery codes left.</strong>
                <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
            </RadzenAlert>
        }
        else if (recoveryCodesLeft == 1)
        {
            <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat">
                <strong>You have 1 recovery code left.</strong>
                <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </RadzenAlert>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="false" Variant="Variant.Flat">
                <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
            </RadzenAlert>
        }

        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                
                <RadzenButton 
                        ButtonType="ButtonType.Submit"
                        Text="Forget this browser"
                        ButtonStyle="ButtonStyle.Primary"
                        Size="ButtonSize.Medium"
                        class="rz-my-2" />
            </form>
        }

        <RadzenLink Path="Account/Manage/Disable2fa">
            <RadzenButton 
                ButtonType="ButtonType.Submit"
                Text="Disable 2FA"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Medium"
                class="rz-my-2" />
        </RadzenLink>
        <RadzenLink Path="Account/Manage/GenerateRecoveryCodes">
            <RadzenButton 
                ButtonType="ButtonType.Submit"
                Text="Reset recovery codes"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Medium"
                class="rz-my-2" />
        </RadzenLink>
    }

    <h4>Authenticator app</h4>
    @if (!hasAuthenticator)
    {
        <RadzenLink Path="Account/Manage/EnableAuthenticator">
            <RadzenButton 
                ButtonType="ButtonType.Submit"
                Text="Add authenticator apps"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Medium"
                class="rz-my-2" />
        </RadzenLink>
    }
    else
    {
        <RadzenLink Path="Account/Manage/EnableAuthenticator">
            <RadzenButton 
                ButtonType="ButtonType.Submit"
                Text="Set up authenticator app"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Medium"
                class="rz-my-2" />
        </RadzenLink>
        <RadzenLink Path="Account/Manage/ResetAuthenticator">
            <RadzenButton 
                ButtonType="ButtonType.Submit"
                Text="Reset authenticator app"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Medium"
                class="rz-my-2" />
        </RadzenLink>
    }
}
else
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="false" Variant="Variant.Flat">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <p>You must accept the policy before you can enable two factor authentication.</p>
    </RadzenAlert>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }
}
