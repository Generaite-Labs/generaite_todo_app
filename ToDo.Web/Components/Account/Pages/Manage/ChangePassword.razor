@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ToDo.Domain.Entities

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<RadzenText TextStyle="TextStyle.H3">Change password</RadzenText>
<StatusMessage Message="@message" />

<RadzenRow>
    <RadzenColumn Size="6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="rz-color-danger" role="alert" />
            <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Start">
                <RadzenFormField Text="Old password" Style="width: 100%;">
                    <InputText type="password" @bind-Value="Input.OldPassword" class="form-control rz-textbox"
                        autocomplete="current-password" aria-required="true"
                        placeholder="Please enter your old password." />
                    <ValidationMessage For="() => Input.OldPassword" class="rz-color-danger" />
                </RadzenFormField>
                <RadzenFormField Text="New password" Style="width: 100%;">
                    <InputText type="password" @bind-Value="Input.NewPassword" class="form-control rz-textbox"
                        autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                    <ValidationMessage For="() => Input.NewPassword" class="rz-color-danger" />
                </RadzenFormField>
                <RadzenFormField Text="Confirm password" Style="width: 100%;">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control rz-textbox"
                        autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="rz-color-danger" />
                </RadzenFormField>
            </RadzenStack>

            <RadzenButton ButtonType="ButtonType.Submit" Text="Update password" ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.Large" class="rz-w-100 rz-mt-6" />
        </EditForm>
    </RadzenColumn>
</RadzenRow>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
