@page "/reset-password"
@page "/reset-password/{Email}"
@using ToDo.WebClient.ToDoClient
@using ToDo.WebClient.ToDoClient.Models
@using System.Web
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<RadzenCard>
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H3">Reset Password</RadzenText>

        <RadzenTemplateForm TItem="ResetPasswordModel" Data="@model" Submit="@OnSubmit">
            <RadzenStack Gap="1rem">
                <RadzenFormField Text="Email" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="@model.Email" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" />
                    <RadzenEmailValidator Component="Email" Text="Please enter a valid email address" />
                </RadzenFormField>

                <RadzenFormField Text="Reset Code" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="@model.ResetCode" Name="ResetCode" />
                    <RadzenRequiredValidator Component="ResetCode" Text="Reset code is required" />
                </RadzenFormField>

                <RadzenFormField Text="New Password" Variant="Variant.Outlined">
                    <RadzenPassword @bind-Value="@model.NewPassword" Name="NewPassword" />
                    <RadzenRequiredValidator Component="NewPassword" Text="New password is required" />
                    <RadzenLengthValidator Component="NewPassword" Min="8" Text="Password must be at least 8 characters long" />
                </RadzenFormField>

                <RadzenFormField Text="Confirm New Password" Variant="Variant.Outlined">
                    <RadzenPassword @bind-Value="@confirmPassword" Name="ConfirmPassword" />
                    <RadzenRequiredValidator Component="ConfirmPassword" Text="Confirm password is required" />
                    <RadzenCompareValidator Component="ConfirmPassword" Value="@model.NewPassword" Text="Passwords do not match" />
                </RadzenFormField>

                <RadzenButton ButtonType="ButtonType.Submit" Text="Reset Password" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter]
    public string? Email { get; set; }

    private ResetPasswordModel model = new ResetPasswordModel();
    private string confirmPassword = string.Empty;

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);
        var emailFromQuery = query["email"];

        if (!string.IsNullOrEmpty(emailFromQuery))
        {
            model.Email = emailFromQuery;
        }
        else if (!string.IsNullOrEmpty(Email))
        {
            model.Email = Email;
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            var request = new ResetPasswordRequest
            {
                Email = model.Email,
                ResetCode = model.ResetCode,
                NewPassword = model.NewPassword
            };

            await ApiClient.ResetPassword.PostAsync(request);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Password Reset Successful",
                Detail = "Your password has been reset successfully. You can now log in with your new password.",
                Duration = 6000
            });

            // Redirect to the login page with the email as a query parameter
            NavigationManager.NavigateTo($"/login?email={Uri.EscapeDataString(model.Email)}");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "An error occurred while resetting the password. Please try again.",
                Duration = 4000
            });
            Console.WriteLine($"Error resetting password: {ex.Message}");
        }
    }

    private class ResetPasswordModel
    {
        public string Email { get; set; } = string.Empty;
        public string ResetCode { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
    }
}
