@page "/forgotpassword"
@using ToDo.WebClient.ToDoClient
@using ToDo.WebClient.ToDoClient.Models
@using Microsoft.Kiota.Abstractions
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<RadzenCard>
    <RadzenStack Gap="1rem">
        <RadzenText TextStyle="TextStyle.H3">Forgot Password</RadzenText>

        <RadzenTemplateForm TItem="ForgotPasswordModel" Data="@forgotPasswordModel" Submit="@HandleForgotPassword">
            <RadzenStack Gap="1rem">
                <RadzenFormField Text="Email" Variant="Variant.Outlined">
                    <RadzenTextBox Name="Email" @bind-Value="@forgotPasswordModel.Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" />
                    <RadzenEmailValidator Component="Email" Text="Provide a valid email address" />
                </RadzenFormField>

                <RadzenButton ButtonType="ButtonType.Submit" Text="Send Reset Link" ButtonStyle="ButtonStyle.Primary" />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenStack>
</RadzenCard>

@code {
    private ForgotPasswordModel forgotPasswordModel = new ForgotPasswordModel();

    private async Task HandleForgotPassword()
    {
        try
        {
            await ApiClient.ForgotPassword.PostAsync(new ForgotPasswordRequest
            {
                Email = forgotPasswordModel.Email
            });

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Password Reset Link Sent",
                Detail = "If an account exists with this email, a password reset link has been sent. Please check your email.",
                Duration = 6000
            });

            NavigationManager.NavigateTo("/login");
        }
        catch (ApiException ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = ex.Message,
                Duration = 4000
            });
        }
        catch (Exception)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "An unexpected error occurred. Please try again later.",
                Duration = 4000
            });
        }
    }

    private class ForgotPasswordModel
    {
        public string Email { get; set; } = string.Empty;
    }
}
