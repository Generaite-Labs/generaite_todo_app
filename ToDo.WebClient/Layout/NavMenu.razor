@using Microsoft.AspNetCore.Components.Authorization
@using ToDo.WebClient.Identity
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenPanelMenu>
    <RadzenPanelMenuItem Text="Home" Icon="home" Path="" />
    <AuthorizeView>
        <Authorized>
            <RadzenPanelMenuItem Text="Tasks" Icon="add" Path="todo" />
            <RadzenPanelMenuItem Text="@GetUserDisplayName(context)" Icon="account_circle">
                <RadzenPanelMenuItem Text="Logout" Icon="logout" Click="Logout" />
            </RadzenPanelMenuItem>
        </Authorized>
        <NotAuthorized>
            <RadzenPanelMenuItem Text="Account" Icon="account_circle">
                <RadzenPanelMenuItem Text="Login" Icon="login" Click="Login" />
                <RadzenPanelMenuItem Text="Register" Icon="person_add" Click="Register" />
            </RadzenPanelMenuItem>
        </NotAuthorized>
    </AuthorizeView>
</RadzenPanelMenu>

@code {
    private void Login()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void Register()
    {
        NavigationManager.NavigateTo("/register");
    }

    private async Task Logout()
    {
        if (AuthenticationStateProvider is IAccountManagement accountManagement)
        {
            await accountManagement.LogoutAsync();
            NavigationManager.NavigateTo("/");
        }
    }

    private string GetUserDisplayName(AuthenticationState authState)
    {
        var name = authState.User.FindFirst(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name")?.Value;
        if (!string.IsNullOrEmpty(name))
        {
            return name;
        }
        
        var email = authState.User.FindFirst(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress")?.Value;
        if (!string.IsNullOrEmpty(email))
        {
            return email;
        }

        return "Account";
    }
}
